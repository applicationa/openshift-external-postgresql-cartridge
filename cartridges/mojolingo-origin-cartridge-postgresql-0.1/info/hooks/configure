#!/bin/bash

# Creates a postgresql instance

# Exit on any errors
set -e

function print_help {
    echo "Usage: $0 app-name namespace uuid git-url"

    echo "$0 $@" | logger -p local0.notice -t openshift_origin_postgresql_configure
    exit 1
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -eq 4 -o $# -eq 3 ] || print_help

cartridge_type="postgresql-0.1"
source "/etc/openshift/node.conf"
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util
source "/etc/openshift/pgsql_cartridge.conf"

CART_INSTANCE_DIR=$(get_cartridge_instance_dir "$cartridge_type")
CART_INFO_DIR=${CARTRIDGE_BASE_PATH}/embedded/$cartridge_type/info
source ${CART_INFO_DIR}/lib/util

setup_configure "$1" $2 $3 $4
disable_cgroups

check_cartridge_dir_doesnt_exist

# Repo
if [ ! -d $git_url ]; then
	clone_external_git_repo $application $user_id $group_id $uuid $git_url
else
	clone_git_repo $application $user_id $group_id $uuid "postgresql 0.1"
fi

#
# Create the core of the application
#

create_cartridge_instance_dir "$cartridge_type"
DIY_INSTANCE_DIR=$(get_cartridge_instance_dir "$cartridge_type")
pushd "$DIY_INSTANCE_DIR" > /dev/null
create_standard_app_dirs
mkdir -p ../.m2/repository
chown -R $user_id ../.m2/repository
mkdir logs
popd > /dev/null

populate_repo_dir

#
# Mojo Lingo Specific Additions to DIY
#
dbname=${namespace}${application}
dbpass=`echo "${application}${uuid}" |md5sum |cut -c 1-32`
PGPASSWORD=$PGSQL_CARTRIDGE_PASSWORD createuser -S -D -R -l -h $PGSQL_CARTRIDGE_HOST -p $PGSQL_CARTRIDGE_PORT -U $PGSQL_CARTRIDGE_USER $uuid
cat <<EOF | PGPASSWORD=$PGSQL_CARTRIDGE_PASSWORD psql -a -h $PGSQL_CARTRIDGE_HOST -p $PGSQL_CARTRIDGE_PORT -U PGSQL_CARTRIDGE_USER -d postgres -f - || error "Failed to set credentials or create database" 124
CREATE DATABASE "$dbname" OWNER "$uuid";
ALTER USER $uuid PASSWORD '$dbpass';
GRANT ALL PRIVILEGES ON DATABASE $dbname TO $uuid;
EOF

echo "export PGSQL_CARTRIDGE_HOST=$PGSQL_CARTRIDGE_HOST" > $APP_HOME/.env/PGSQL_CARTRIDGE_HOST
echo "export PGSQL_CARTRIDGE_PORT=$PGSQL_CARTRIDGE_PORT" > $APP_HOME/.env/PGSQL_CARTRIDGE_PORT
echo "export PGSQL_CARTRIDGE_USER=$PGSQL_CARTRIDGE_USER" > $APP_HOME/.env/PGSQL_CARTRIDGE_USER
echo "export PGSQL_CARTRIDGE_PASSWORD=$PGSQL_CARTRIDGE_PASSWORD" > $APP_HOME/.env/PGSQL_CARTRIDGE_PASSWORD
echo "export PGSQL_CARTRIDGE_CONNSTRING='postgresql://$uuid:$dbpass@$PGSQL_CARTRIDGE_HOST:$PGSQL_CARTRIDGE_PORT/'" > $APP_HOME/.env/PGSQL_CARTRIDGE_CONNSTRING

#
# Find an open localhost IP
#
IP=`find_open_ip $uid $uuid`

secure_app_dir

secure_cart_instance_dir

observe_setup_app_and_git_dirs

observe_setup_cart_instance_dir

#
# Create environment variables
#
create_standard_cart_env_vars
create_standard_env_uservars
create_standard_network_env_vars $IP
create_cart_network_env_vars $IP
create_standard_repo_dir_env_var
create_standard_path_env_var

observe_setup_env_uservars_dir

if [ ! -d $git_url ]; then
    #
    # Resolve app dependencies for template
    #
    resolve_application_dependencies $uuid $application &
else
    #
    # Start the server
    #
    start_app
fi

#
# Create virtualhost definition for apache
#
export CART_INFO_DIR
import_env_vars
$CART_INFO_DIR/bin/deploy_httpd_proxy.sh $application $namespace $uuid $IP

restart_httpd_graceful

client_result "Disclaimer: This is an experimental cartridge that provides a way to try unsupported languages, frameworks, and middleware on Openshift."
enable_cgroups
